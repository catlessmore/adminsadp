package site.fish119.adminsadp.utils;

import org.apache.commons.lang.StringUtils;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import site.fish119.adminsadp.repository.sys.AuthorityRepository;
import site.fish119.adminsadp.security.UserDetailsImple;

import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;

/**
 * @Project adminsadp
 * @Package site.fish119.adminsadp.utils
 * @Author fish119
 * @Date 2018/4/10 17:57
 * @Version V1.0
 */
@Aspect
@Component
@Order(1)
public class WebLogAspect {
    private final AuthorityRepository authorityRepository;

    @Autowired
    public WebLogAspect(AuthorityRepository authorityRepository) {
        this.authorityRepository = authorityRepository;
    }

    @Pointcut("execution(public * site.fish119.adminsadp.controller..*.*(..))")
    public void webLog() {
    }

    private ThreadLocal<LogContent> logContent = new ThreadLocal<>();

    @Before("webLog()")
    public void doBefore(JoinPoint joinPoint) throws Throwable {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String username;
        try {
            username = ((UserDetailsImple) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername();
        } catch (Exception e) {
            username = null;
        }
        LogContent lt = new LogContent();
        lt.setStartTime(System.currentTimeMillis());
        lt.setArgs(Arrays.toString(joinPoint.getArgs()));
        lt.setIp(getIpAddress(request));
        lt.setHttpMethod(request.getMethod());
        lt.setUrl(request.getRequestURL().toString());
        lt.setUsername(username);
        lt.setClassName(joinPoint.getSignature().getDeclaringTypeName());
        logContent.set(lt);
    }

    @AfterReturning(returning = "ret", pointcut = "webLog()")
    public void doAfterReturning(Object ret) throws Throwable {
        Logger logger = LoggerFactory.getLogger(logContent.get().getClassName());
        LogContent lt = logContent.get();
        String message;
        try {
            message = ((ResponseEntity) ret).getStatusCodeValue() + "::" + ((ResponseEntity) ret).getStatusCode().name();
        } catch (Exception e) {
            message = ret.toString();
        }
        logger.info(message, lt.getUsername(), getRequestName(lt.getUrl(), lt.getHttpMethod()), System.currentTimeMillis() - lt.getStartTime(), lt.getIp());
    }

    private String getIpAddress(HttpServletRequest request) {
        String ip = request.getHeader("X-Forwarded-For");
        if (StringUtils.isNotEmpty(ip) && !"unKnown".equalsIgnoreCase(ip)) {
            //多次反向代理后会有多个ip值，第一个ip才是真实ip
            int index = ip.indexOf(",");
            if (index != -1) {
                return ip.substring(0, index);
            } else {
                return ip;
            }
        }
        ip = request.getHeader("X-Real-IP");
        if (StringUtils.isNotEmpty(ip) && !"unKnown".equalsIgnoreCase(ip)) {
            return ip;
        }
        return request.getRemoteAddr();
    }

    private String getRequestName(String url, String method) {
        String path = getPath(url);
        if (StringUtils.isNotEmpty(path) && StringUtils.isNotEmpty(method)) {
            try {
                return authorityRepository.findFirstByMethodAndUrl(method, path).getName();
            } catch (Exception e) {
                return url;
            }
        } else {
            return "系统进程";
        }
    }

    private String getPath(String url) {
        String result = null;
        if (StringUtils.isNotEmpty(url) && url.contains("://")) {
            String serverUrl = url.split("://")[0];
            result = url.replace(serverUrl + "://", "");
            result = "/" + result.replace(result.split("/")[0] + "/", "");
        }
        return result;
    }

    public class LogContent {
        private Long startTime;
        private String url;
        private String httpMethod;
        private String ip;
        private String method;
        private String args;
        private String username;
        private String className;

        public Long getStartTime() {
            return startTime;
        }

        public void setStartTime(Long startTime) {
            this.startTime = startTime;
        }

        public String getClassName() {
            return className;
        }

        public void setClassName(String className) {
            this.className = className;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getUrl() {
            return url;
        }

        public void setUrl(String url) {
            this.url = url;
        }

        public String getHttpMethod() {
            return httpMethod;
        }

        public void setHttpMethod(String httpMethod) {
            this.httpMethod = httpMethod;
        }

        public String getIp() {
            return ip;
        }

        public void setIp(String ip) {
            this.ip = ip;
        }

        public String getMethod() {
            return method;
        }

        public void setMethod(String method) {
            this.method = method;
        }

        public String getArgs() {
            return args;
        }

        public void setArgs(String args) {
            this.args = args;
        }
    }
}
